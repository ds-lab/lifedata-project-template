{"version":3,"sources":["lifedata-component-lib.tsx","CsvSampleView.tsx","index.tsx"],"names":["ComponentMessageType","FrameworkMessageType","LIFEDATA","event","data","RENDER","onRenderMessage","registeredMessageListener","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","API_VERSION","lastData","lastFrameHeight","events","EventTarget","setFrameHeight","height","undefined","document","body","scrollHeight","SET_FRAME_HEIGHT","args","console","error","eventData","id","CustomEvent","detail","dispatchEvent","type","parent","postMessage","isLifedataMessage","ConnectSampleView","SampleViewComponent","component","useState","setData","setArgs","innerWidth","width","setWidth","useEffect","listener","renderData","setComponentReady","removeEventListener","CsvSampleView","csvData","rows","Papa","parse","header","slice","TableContainer","Paper","Table","size","aria-label","TableHead","TableRow","map","cell","i","TableCell","TableBody","row","j","ReactDOM","render","StrictMode","getElementById"],"mappings":"4IAYKA,EAUAC,E,kFAVAD,K,0CAAAA,E,4CAAAA,M,cAUAC,K,0BAAAA,M,SAUCC,E,mGA6BJ,SAA8BC,GAE5B,OADaA,EAAMC,KAAN,MAEX,KAAKH,EAAqBI,OACxBH,EAASI,gBAAgBH,EAAMC,S,+BAsBrC,WACOF,EAASK,4BAEZC,OAAOC,iBAAiB,UAAWP,EAASQ,gBAC5CR,EAASK,2BAA4B,GAGvCL,EAASS,YAAYX,EAAqBY,gBAAiB,CACzDC,WAAYX,EAASY,kB,KA/DrBZ,EACmBY,YAAc,EADjCZ,EAEUa,c,EAFVb,EAGUc,qB,EAHVd,EAIUK,2BAAqC,EAJ/CL,EAKmBe,OAAS,IAAIC,YALhChB,EAYUiB,eAAiB,SAACC,QACfC,IAAXD,IAIFA,EAASE,SAASC,KAAKC,cAGrBJ,IAAWlB,EAASc,kBAKxBd,EAASc,gBAAkBI,EAC3BlB,EAASS,YAAYX,EAAqByB,iBAAkB,CAAEL,aA1B5DlB,EAsCWI,gBAAkB,SAACF,GAChC,IAAIsB,EAAOtB,EAAI,KACH,MAARsB,IACFC,QAAQC,MAAR,6DAEExB,GAEFsB,EAAO,IAGT,IAAMG,EAAY,CAAEC,GAAI1B,EAAK0B,GAAI1B,KAAMA,EAAKA,KAAMsB,QAC5CvB,EAAQ,IAAI4B,YAAwB9B,EAAqBI,OAAQ,CACrE2B,OAAQH,IAEV3B,EAASe,OAAOgB,cAAc9B,IApD5BD,EAmEWS,YAAc,SAACuB,EAAc9B,GAC1CI,OAAO2B,OAAOC,YAAd,aAEIC,mBAAmB,EACnBH,KAAMA,GACH9B,GAEL,MAYN,IAAMkC,EAAoB,SAAC,GAIpB,IAHMC,EAGP,EAHJC,UAGI,EACoBC,wBAAiCpB,GADrD,mBACGjB,EADH,KACSsC,EADT,OAEoBD,mBAAS,IAF7B,mBAEGf,EAFH,KAESiB,EAFT,OAGsBF,mBAASjC,OAAOoC,YAHtC,mBAGGC,EAHH,KAGUC,EAHV,KAqCJ,OAhCAC,qBAAU,WACR,IAAMC,EAAW,SAAC7C,GAChB,IAAM8C,EAAc9C,EAAkC6B,OAEtDU,EAAQ,CACNZ,GAAImB,EAAWnB,GACf1B,KAAM6C,EAAW7C,OAEnBuC,EAAQM,EAAWvB,OAKrB,OAFAxB,EAASe,OAAOR,iBAAiBR,EAAqBI,OAAQ2C,GAC9D9C,EAASgD,oBACF,WACLhD,EAASe,OAAOkC,oBAAoBlD,EAAqBI,OAAQ2C,MAElE,IAEHD,qBAAU,WAGR7C,EAASiB,mBACR,CAACf,EAAMsB,EAAMmB,EAAON,IAEvBQ,qBAAU,WACR,IAAMC,EAAW,WACfF,EAAStC,OAAOoC,aAGlB,OADApC,OAAOC,iBAAiB,SAAUuC,GAC3B,kBAAMxC,OAAO2C,oBAAoB,SAAUH,YAGpC3B,IAATjB,EAAqB,KAC1B,cAACmC,EAAD,CACET,GAAI1B,EAAK0B,GACT1B,KAAMA,EAAKA,KACXsB,KAAMA,EACNmB,MAAOA,K,yEC3GEO,EA9BO,SAAC,GAA8C,EAA5CtB,GAA6C,IAAnCuB,EAAkC,EAAxCjD,KAErBkD,GAF6D,EAAzB5B,KAAyB,EAAnBmB,MAC1BU,IAAKC,MAAMH,EAAS,CAAEI,QAAQ,IACzBrD,MACrBqD,EAASH,EAAK,GACd/B,EAAO+B,EAAKI,MAAM,GAExB,OACE,cAACC,EAAA,EAAD,CAAgBnB,UAAWoB,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,aAAW,gBAA/B,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGR,EAAOS,KAAI,SAACC,EAAMC,GAAP,OACV,cAACC,EAAA,EAAD,UAAoBF,GAAJC,UAItB,cAACE,EAAA,EAAD,UACG/C,EAAK2C,KAAI,SAACK,EAAKH,GAAN,OACR,cAACH,EAAA,EAAD,UACGM,EAAIL,KAAI,SAACC,EAAMK,GAAP,OACP,cAACH,EAAA,EAAD,UAA8BF,GAA9B,UAAmBC,EAAnB,YAAwBI,QAFbJ,cCvC3BK,IAASC,OACP,cAAC,IAAMC,WAAP,UAGE,cAAC,EAAD,CAAmBnC,UAAWY,MAEhC9B,SAASsD,eAAe,W","file":"static/js/main.df5d9c48.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\n\n// This is a reusable code part that should - in the long run - be placed in the\n// lifedata framework repository.\n// SampleData {\n  id: string\n  data: any\n}\ntype SampleViewArgs = any\n\nenum ComponentMessageType {\n  // Data: { apiVersion: number }\n  // Only version 1 is supported at the moment.\n  COMPONENT_READY = \"lifedata:componentReady\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"lifedata:setFrameHeight\",\n}\n\nenum FrameworkMessageType {\n  RENDER = \"lifedata:render\",\n}\n\nexport interface RenderData {\n  id: string\n  data: any\n  args: any\n}\n\nclass LIFEDATA {\n  public static readonly API_VERSION = 1\n  public static lastData: SampleData\n  public static lastFrameHeight?: number\n  public static registeredMessageListener: boolean = false\n  public static readonly events = new EventTarget()\n\n  /**\n   * Report the component's height to LIFEDATA.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === LIFEDATA.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    LIFEDATA.lastFrameHeight = height\n    LIFEDATA.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  private static onMessageEvent(event: MessageEvent): void {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case FrameworkMessageType.RENDER:\n        LIFEDATA.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`,\n        data\n      )\n      args = {}\n    }\n\n    const eventData = { id: data.id, data: data.data, args }\n    const event = new CustomEvent<RenderData>(FrameworkMessageType.RENDER, {\n      detail: eventData,\n    })\n    LIFEDATA.events.dispatchEvent(event)\n  }\n\n  public static setComponentReady(): void {\n    if (!LIFEDATA.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", LIFEDATA.onMessageEvent)\n      LIFEDATA.registeredMessageListener = true\n    }\n\n    LIFEDATA.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: LIFEDATA.API_VERSION,\n    })\n  }\n\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isLifedataMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface SampleViewProps {\n  id: string\n  data: SampleData\n  args: SampleViewArgs\n  width: number\n}\n\nconst ConnectSampleView = ({\n  component: SampleViewComponent,\n}: {\n  component: React.ComponentType<SampleViewProps>\n}) => {\n  const [data, setData] = useState<SampleData | undefined>(undefined)\n  const [args, setArgs] = useState({})\n  const [width, setWidth] = useState(window.innerWidth)\n\n  useEffect(() => {\n    const listener = (event: Event) => {\n      const renderData = (event as CustomEvent<RenderData>).detail\n\n      setData({\n        id: renderData.id,\n        data: renderData.data,\n      })\n      setArgs(renderData.args)\n    }\n\n    LIFEDATA.events.addEventListener(FrameworkMessageType.RENDER, listener)\n    LIFEDATA.setComponentReady()\n    return () => {\n      LIFEDATA.events.removeEventListener(FrameworkMessageType.RENDER, listener)\n    }\n  }, [])\n\n  useEffect(() => {\n    // Every time the component props update, we notify the framework of a\n    // possible changed height.\n    LIFEDATA.setFrameHeight()\n  }, [data, args, width, SampleViewComponent])\n\n  useEffect(() => {\n    const listener = () => {\n      setWidth(window.innerWidth)\n    }\n    window.addEventListener(\"resize\", listener)\n    return () => window.removeEventListener(\"resize\", listener)\n  })\n\n  return data === undefined ? null : (\n    <SampleViewComponent\n      id={data.id}\n      data={data.data}\n      args={args}\n      width={width}\n    ></SampleViewComponent>\n  )\n}\n\nexport { ConnectSampleView }\n","import Paper from \"@material-ui/core/Paper\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport Papa from \"papaparse\"\nimport React from \"react\"\n\n\ninterface Props {\n  id: string\n  // This is dependent on the data format provided by `read_sample_for_display` in `lifedata_api.py`.\n  data: any\n  // Arguments can be passed via the `SampleView` configuration in\n  // `lifedata_api.py` to statically configure the view.\n  args: {}\n  width: number\n}\n\n/**\n * This is a React-based sample view template. The data for the sample is\n * provided via `data`, integrate any HTML and react components you like to\n * display your sample data in the desired way.\n */\n\nconst CsvSampleView = ({ id, data: csvData, args, width }: Props) => {\n  const parsedCsvdata = Papa.parse(csvData, { header: false })\n  const rows = parsedCsvdata.data as Array<Array<string>>\n  const header = rows[0]\n  const body = rows.slice(1)\n\n  return (\n    <TableContainer component={Paper}>\n      <Table size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            {header.map((cell, i) => (\n              <TableCell key={i}>{cell}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {body.map((row, i) => (\n            <TableRow key={i}>\n              {row.map((cell, j) => (\n                <TableCell key={`${i}-${j}`}>{cell}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default CsvSampleView\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ConnectSampleView } from \"./lifedata-component-lib\"\nimport CsvSampleView from \"./CsvSampleView\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* \"ConnectSampleView\" is a wrapper component that bootstraps the connection\n    between your component and the LIFEDATA annotation interface. */}\n    <ConnectSampleView component={CsvSampleView} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}